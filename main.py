import time
import json
import telegram_methods as tg
import re
import logging
import sys
import asyncio

def build_keyboard_help():
    reply_markup = {"keyboard": [['/help'],['‚ù§Ô∏è']], "one_time_keyboard": False, "resize_keyboard": True}
    return json.dumps(reply_markup)

simple_statistic = set()
keyboard_help = build_keyboard_help()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("debug.log"),
        logging.StreamHandler(sys.stdout)
    ]
)


async def process_update(update: dict) -> None:
    logs = []

    for key in update:
        if type(update[key]) is dict and 'chat' in update[key]:
            logs.append(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –æ—Ç {update[key]['chat']['username']}")
            break

    if 'edited_message' in update:
        simple_statistic.add(update['edited_message']['chat']['id'])
        await tg.async_send_message('–¢—ã –∏–∑–º–µ–Ω–∏–ª –∫–∞–∫–æ–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ -.-', update['edited_message']['chat']['id'])
        for log in logs:
            logging.info(log)
        logging.info(f"–ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    if 'message' not in update:
        simple_statistic.add(update['my_chat_member']['chat']['id'])
        await tg.async_send_message('–¢–∞–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ—Ç', update['my_chat_member']['chat']['id'])
        for log in logs:
            logging.info(log)
        logging.info(f'–ö—Ç–æ-—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞–ª—Å—è')
        return

    chat = update["message"]["chat"]["id"]
    simple_statistic.add(chat)
    try:
        text = update["message"]["text"]

        if text == '/start':
            await tg.async_send_message(
                '–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∫–∏ –∏–∑ –î–µ–º–∏–¥–æ–≤–∏—á–∞, '
                '–∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å', chat, keyboard_help)
            for log in logs:
                logging.info(log)
            logging.info("    * –û—Ç–ø—Ä–∞–≤–∏–ª /start")
        elif text == '/help':
            await tg.async_send_message(
                '–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –Ω–æ–º–µ—Ä –∏–∑ –¥–µ–º–∏–¥–æ–≤–∏—á–∞ \n'
                '–ü–∏—à–∏ –µ–º—É –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É:\n652 –∏–ª–∏ 652.1 \n\n'
                '–ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫—É —É—Å–ª–æ–≤–∏—è (–æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç, —É–≤—ã) \n'
                '–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ–Ω —Ç–æ—á–Ω–æ –µ—Å—Ç—å, '
                '–ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ \n(–∏–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä —Å —Ç–æ—á–∫–æ–π –∫–∞–∫ 123.4, '
                '–ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—É—é —á–∞—Å—Ç—å (123))\n\n'
                '–ï—Å–ª–∏ –±—É–¥—É—Ç –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–∏—à–∏ –∞–≤—Ç–æ—Ä–∞–º: @therealnowhereman, @Demotivator_Stepan, @not_amigo\n'
                '–£–¥–∞—á–∏!) ü•∞', chat)
            for log in logs:
                logging.info(log)
            logging.info('    * –û—Ç–ø—Ä–∞–≤–∏–ª /help')
        elif text == '‚ù§Ô∏è':
            await tg.async_send_message(f'‚ù§Ô∏è', chat)
            for log in logs:
                logging.info(log)
            logging.info('    * –û—Ç–ø—Ä–∞–≤–∏–ª —Å–µ—Ä–¥–µ—á–∫–æ')
        elif text == '/stat':
            await tg.async_send_message(
                f'C–µ–≥–æ–¥–Ω—è –±–æ—Ç–∞ —é–∑–∞–ª–∏ {len(simple_statistic)} —á–µ–ª–æ–≤–µ–∫ üò±', chat)
            for log in logs:
                logging.info(log)
            logging.info("    * –û—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        else:
            number_found = re.fullmatch(r'\d*\.?(\d*)?', text)
            if number_found:
                if tg.is_file_exist(f'images/{number_found[0]}.gif'):
                    await tg.async_send_photo(f'images/{number_found[0]}.gif', chat,
                                     f'–í–æ—Ç —Ç–≤–æ–π –Ω–æ–º–µ—Ä {number_found[0]} üòò')
                    for log in logs:
                        logging.info(log)
                    logging.info(f'    * –û—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä {number_found[0]}')
                else:
                    possible_number = number_found[0].split('.')[0]
                    await tg.async_send_message(f'–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä {number_found[0]} –≤ –±–∞–∑–µ ü§•', chat)

                    logs.append(f'    * –ù–µ –Ω–∞—à–µ–ª –Ω–æ–º–µ—Ä–∞ {number_found[0]} –≤ –±–∞–∑–µ')

                    if tg.is_file_exist(f'images/{possible_number}.gif'):
                        await tg.async_send_photo(f'images/{possible_number}.gif', chat,
                                         f'–í–æ–∑–º–æ–∂–Ω–æ, —Ç–≤–æ–π –Ω–æ–º–µ—Ä –µ—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ —Å –Ω–æ–º–µ—Ä–æ–º {possible_number} üôÑ')
                        for log in logs[:-1]:
                            logging.info(log)
                        logging.warning(logs[-1])
                        logging.info(f'    * –û—Ç–ø—Ä–∞–≤–∏–ª –≤–æ–∑–º–æ–∂–Ω—ã–π –Ω–æ–º–µ—Ä {possible_number}')

            else:
                await tg.async_send_message(f'"{text}" - –ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä ü•∏\n'
                                   f'–ù–æ–º–µ—Ä–∞ –∏–º–µ—é –≤–∏–¥:\n'
                                   f'652 –∏ 652.1', chat, keyboard_help)
                for log in logs:
                    logging.info(log)
                logging.info(f'    * –ù–µ –Ω–æ–º–µ—Ä "{text}"')
    except Exception as e:
        await tg.async_send_message(f'–¢—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª ü´£', chat, keyboard_help)
        for log in logs:
            logging.info(log)
        logging.error(f"    * –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! {str(e)}")


async def handle_updates(updates):
    futures = [process_update(update) for update in updates["result"]]
    for future in asyncio.as_completed(futures):
        await future


async def start():
    last_update_id = tg.get_latest_request_id()
    while True:
        updates = tg.get_updates(last_update_id)
        if len(updates["result"]) > 0:
            last_update_id = tg.get_last_update_id(updates) + 1
            await handle_updates(updates)
        time.sleep(0.5)


async def main():
    while True:
        try:
            # 635201622 - id —á–∞—Ç–∞ —Å StepaZet
            await tg.async_send_message(f'–ë–æ—Ç –ø–æ–¥–Ω—è—Ç', 635201622)
            await start()
        except Exception as e:
            await tg.async_send_message(f'–ë–æ—Ç –ª–µ–≥ —Å –æ—à–∏–±–∫–æ–π {str(e)}', 635201622)
            time.sleep(120)

if __name__ == '__main__':
    while True:
        ioloop = asyncio.new_event_loop()
        top_dict = ioloop.run_until_complete(main())
        ioloop.close()
