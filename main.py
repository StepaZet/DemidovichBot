import time
import json
import urllib.parse
import requests
import re
import os
import threading
from datetime import datetime


#db = DBHelper('weather_data')
TOKEN = "5584161509:AAFwAx4FNR_hSJNArQulRQ1alba-CjjLszA"
URL = f"https://api.telegram.org/bot{TOKEN}/"
simple_statistic = set()

def send_message(text, chat_id, reply_markup=None):
    text = urllib.parse.quote_plus(text)
    url = f"{URL}sendMessage?text={text}&chat_id={chat_id}"
    if reply_markup:
        url += f"&reply_markup={reply_markup}"
    get_url(url)


def send_photo(photo, chat_id, text=None, reply_markup=None, ):
    url = f"{URL}sendPhoto?chat_id={chat_id}"
    files = {'photo': open(photo, 'rb')}
    if text:
        text = urllib.parse.quote_plus(text)
        url += f'&caption={text}'
    if reply_markup:
        url += f"&reply_markup={reply_markup}"
    requests.post(url, files=files)


def get_url(url: str):
    response = requests.get(url)
    content = response.content.decode("utf8")
    return content


def get_json_from_url(url: str):
    content = get_url(url)
    js = json.loads(content)
    return js


def get_updates(offset=None):
    url = URL + "getUpdates?timeout=100"
    if offset:
        url += f"&offset={offset}"
    js = get_json_from_url(url)
    return js


'''
def build_keyboard(items):
    keyboard = [[item] for item in items]
    reply_markup = {"keyboard":keyboard, "one_time_keyboard": True}
    return json.dumps(reply_markup)
'''


def build_keyboard_help():
    reply_markup = {"keyboard": [['/help'],['‚ù§']], "one_time_keyboard": False, "resize_keyboard": True}
    return json.dumps(reply_markup)


def is_file_exist(path: str) -> bool:
    return os.path.isfile(path)


def handle_updates(updates):
    for update in updates["result"]:
        keyboard_help = build_keyboard_help()
        print(f'–ü—Ä–∏–Ω—è—Ç –∑–∞–ø—Ä–æ—Å –≤ {datetime.now()}')
        if 'edited_message' in update:
            simple_statistic.add(update['edited_message']['chat']['id'])
            send_message('–¢—ã –∏–∑–º–µ–Ω–∏–ª –∫–∞–∫–æ–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ -.-', update['edited_message']['chat']['id'])
            print(f'    * –ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
            continue

        if 'message' not in update:
            simple_statistic.add(update['my_chat_member']['chat']['id'])
            send_message('–¢–∞–∫–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø–æ–∫–∞ –Ω–µ—Ç', update['my_chat_member']['chat']['id'])
            print(f'    * –ö—Ç–æ-—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏–ª–∏ –æ—Ç–ø–∏—Å–∞–ª—Å—è')
            continue

        chat = update["message"]["chat"]["id"]
        simple_statistic.add(chat)
        try:
            text = update["message"]["text"]

            if text == '/start':

                send_message(
                    '–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∫–∏ –∏–∑ –î–µ–º–∏–¥–æ–≤–∏—á–∞, '
                    '–∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å', chat, keyboard_help)
                print('    * –û—Ç–ø—Ä–∞–≤–∏–ª /start')
            elif text == '/help':
                send_message(
                    '–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –Ω–æ–º–µ—Ä –∏–∑ –¥–µ–º–∏–¥–æ–≤–∏—á–∞ \n'
                    '–ü–∏—à–∏ –µ–º—É –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É:\n123 –∏–ª–∏ 123.4 \n\n'
                    '–ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫—É —É—Å–ª–æ–≤–∏—è (–æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏–π –Ω–µ—Ç, —É–≤—ã) \n'
                    '–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ–Ω —Ç–æ—á–Ω–æ –µ—Å—Ç—å, '
                    '–ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Å–µ–¥–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ \n(–∏–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä —Å —Ç–æ—á–∫–æ–π –∫–∞–∫ 123.4, '
                    '–ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª—É—é —á–∞—Å—Ç—å (123))\n\n'
                    '–ï—Å–ª–∏ –±—É–¥—É—Ç –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–∏—à–∏ –∞–≤—Ç–æ—Ä–∞–º: @therealnowhereman, @Demotivator_Stepan, @not_amigo\n'
                    '–£–¥–∞—á–∏!) ü•∞', chat)
                print('    * –û—Ç–ø—Ä–∞–≤–∏–ª /start')
            elif text == '/stat':
                send_message(
                    f'C–µ–≥–æ–¥–Ω—è –±–æ—Ç–∞ –µ–≥–æ —é–∑–∞–ª–∏ {len(simple_statistic)} —á–µ–ª–æ–≤–µ–∫ üò±', chat)
                print('    * –û—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
            elif text == '‚ù§':
                send_message(f'‚ù§', chat)
                print('    * –û—Ç–ø—Ä–∞–≤–∏–ª ‚ù§')
            else:
                number_found = re.fullmatch(r'\d*\.?(\d*)?', text)
                if number_found:
                    if is_file_exist(f'images/{number_found[0]}.gif'):
                        send_photo(f'images/{number_found[0]}.gif', chat,
                                   f'–í–æ—Ç —Ç–≤–æ–π –Ω–æ–º–µ—Ä {number_found[0]} üòò')
                        print(f'    * –û—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä {number_found[0]}')
                    else:
                        send_message(f'–ù–æ–º–µ—Ä–∞ {number_found[0]} –Ω–µ—Ç –≤ –±–∞–∑–µ ü§•', chat)
                        print(f'    * –ù–µ –Ω–∞—à–µ–ª –Ω–æ–º–µ—Ä–∞ {number_found[0]} –≤ –±–∞–∑–µ')
                else:
                    send_message(f'"{text}" - –ù–µ –Ω–æ–º–µ—Ä ü•∏', chat, keyboard_help)
                    print(f'    * –ù–µ –Ω–æ–º–µ—Ä {text}')
        except:
            send_message(f'–¢—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª ü´£', chat, keyboard_help)
            print('    (#) –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')


def get_last_update_id(updates):
    update_ids = []
    for update in updates["result"]:
        update_ids.append(int(update["update_id"]))
    return max(update_ids)


def get_last_chat_id_and_text(updates):
    num_updates = len(updates["result"])
    last_update = num_updates - 1
    text = updates["result"][last_update]["message"]["text"]
    chat_id = updates["result"][last_update]["message"]["chat"]["id"]
    return (text, chat_id)


def send_message(text, chat_id, reply_markup=None):
    text = urllib.parse.quote_plus(text)
    url = f"{URL}sendMessage?text={text}&chat_id={chat_id}"
    if reply_markup:
        url += f"&reply_markup={reply_markup}"
    get_url(url)


def send_photo(photo, chat_id, text=None, reply_markup=None, ):
    url = f"{URL}sendPhoto?chat_id={chat_id}"
    files = {'photo': open(photo, 'rb')}
    if text:
        text = urllib.parse.quote_plus(text)
        url += f'&caption={text}'
    if reply_markup:
        url += f"&reply_markup={reply_markup}"
    requests.post(url, files=files)


def get_latest_request_id():
    updates = get_updates()["result"]
    url = URL + "getUpdates?timeout=100"
    return updates[-1]["update_id"] + 1


def main():
    #db.setup()
    last_update_id = get_latest_request_id()
    while True:
        updates = get_updates(last_update_id)
        if len(updates["result"]) > 0:
            last_update_id = get_last_update_id(updates) + 1
            handle_updates(updates)
        time.sleep(0.5)


if __name__ == '__main__':
    while (True):
        try:
            # 635201622 - id —á–∞—Ç–∞ —Å StepaZet
            send_message(f'–ë–æ—Ç –ø–æ–¥–Ω—è—Ç', 635201622)
            main()
        except Exception as e:
            send_message(f'–ë–æ—Ç –ª–µ–≥ —Å –æ—à–∏–±–∫–æ–π {str(e)}', 635201622)
            time.sleep(120)